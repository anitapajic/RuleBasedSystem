//package backward;
//dialect  "mvel"
//
//import com.ftn.sbnz.model.models.medicine.Medicine
//import com.ftn.sbnz.model.models.therapy.Therapy
//import com.ftn.sbnz.model.models.user.Patient
//import com.ftn.sbnz.model.models.diagnosis.Diagnosis
//
//
//import java.lang.Integer
//import java.util.Random
//import java.util.List;
//
//
//// Query to find therapies for a specific medicine
//query "TherapiesForMedicine" (Medicine $medicine)
//    $therapy: Therapy(medicine == $medicine)
//end
//
//// Query to find all diagnoses for a specific medicine
//query "DiagnosesForMedicine" (Medicine $medicine)
//    $diagnosis: Diagnosis() from accumulate (
//        $therapy: Therapy(medicine == $medicine, $diagnosis: diagnosis),
//        collectList($diagnosis)
//    )
//end
//
//// Query to find distinct patients for a specific medicine
//query "PatientsForMedicine" (Medicine $medicine)
//    $patient: Patient() from accumulate (
//        $diagnosis: Diagnosis() from query "DiagnosesForMedicine" ($medicine),
//        distinct collectList($diagnosis.patient)
//    )
//end
//
//// Rule to calculate and print the number and percentage of patients using a specific medicine
//rule "Calculate Medicine Usage"
//    when
//        $medicine: Medicine(id == 1) // Replace 1 with the desired medicine ID or pass it dynamically
//        $therapies: List() from query "TherapiesForMedicine" ($medicine)
//        $patients: List() from query "PatientsForMedicine" ($medicine)
//        $totalPatients: Number(intValue > 0) from accumulate (Diagnosis(), count($patient))
//    then
//        int numberOfPatients = $patients.size();
//        double percentage = (numberOfPatients / $totalPatients.intValue()) * 100;
//
//        // Create and insert a new Report object if needed, or just log the results
//        System.out.println("Number of patients using medicine: " + numberOfPatients);
//        System.out.println("Percentage of patients using medicine: " + percentage + "%");
//end